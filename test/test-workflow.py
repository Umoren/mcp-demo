#!/usr/bin/env python3
"""
🚀 ULTIMATE MCP WORKFLOW TEST 🚀
Tests the complete multi-service orchestration:
GitHub → Merge → Slack integration via MCP servers
"""

import asyncio
import json
import sys
import os
from datetime import datetime
import subprocess


class MCPClient:
    def __init__(self, server_command):
        """Initialize MCP client with server command"""
        self.server_command = server_command
        self.process = None
        self.request_id = 0
    
    async def start(self):
        """Start the MCP server process"""
        self.process = await asyncio.create_subprocess_exec(
            *self.server_command,
            stdin=asyncio.subprocess.PIPE,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            env=os.environ.copy()
        )
        
        await self.send_initialize()
        
    async def send_initialize(self):
        """Send MCP initialize request"""
        init_request = {
            "jsonrpc": "2.0",
            "id": self.get_next_id(),
            "method": "initialize",
            "params": {
                "protocolVersion": "2024-11-05",
                "capabilities": {"roots": {"listChanged": True}},
                "clientInfo": {"name": "mcp-workflow-client", "version": "1.0.0"}
            }
        }
        
        response = await self.send_request(init_request)
        if "error" in response:
            raise Exception(f"Initialize failed: {response['error']}")
        return response
    
    async def send_request(self, request):
        """Send a JSON-RPC request and get response"""
        if not self.process:
            raise Exception("MCP server not started")
        
        request_json = json.dumps(request) + "\n"
        self.process.stdin.write(request_json.encode())
        await self.process.stdin.drain()
        
        response_line = await self.process.stdout.readline()
        if not response_line:
            stderr_output = await self.process.stderr.read()
            raise Exception(f"No response from server. Stderr: {stderr_output.decode()}")
        
        return json.loads(response_line.decode().strip())
    
    def get_next_id(self):
        """Get next request ID"""
        self.request_id += 1
        return self.request_id
    
    async def call_tool(self, tool_name, arguments):
        """Call a specific tool"""
        request = {
            "jsonrpc": "2.0",
            "id": self.get_next_id(),
            "method": "tools/call",
            "params": {"name": tool_name, "arguments": arguments}
        }
        
        response = await self.send_request(request)
        if "error" in response:
            raise Exception(f"Tool call failed: {response['error']}")
        return response["result"]
    
    async def close(self):
        """Close the MCP connection"""
        if self.process:
            self.process.stdin.close()
            await self.process.wait()


async def test_complete_workflow():
    """
    🎯 COMPLETE BUSINESS WORKFLOW TEST
    Scenario: New lead comes in, create GitHub issue, CRM contact, and Slack notification
    """
    
    print("🚀 ULTIMATE MCP MULTI-SERVICE WORKFLOW TEST")
    print("=" * 60)
    print("📋 Scenario: New lead → GitHub issue → CRM contact → Slack notification")
    print()
    
    # Generate unique identifiers for this test run
    timestamp = datetime.now().strftime('%H%M%S')
    lead_name = f"Acme Corp Lead {timestamp}"
    lead_email = f"lead{timestamp}@acmecorp.com"
    
    print(f"🎯 Test Lead: {lead_name} ({lead_email})")
    print()
    
    # Results storage
    results = {
        "github_issue": None,
        "crm_contact": None,
        "slack_message": None
    }
    
    # ===========================================
    # STEP 1: CREATE GITHUB ISSUE FOR NEW LEAD
    # ===========================================
    
    print("📝 STEP 1: Creating GitHub issue for new lead...")
    print("-" * 50)
    
    github_client = MCPClient([
        "sudo", "docker", "exec", "-i", "mcp-demo-github-mcp-1",
        "node", "src/index.js"
    ])
    
    try:
        await github_client.start()
        
        issue_result = await github_client.call_tool("create_issue", {
            "title": f"🎯 New Lead: {lead_name}",
            "body": f"""## New Business Lead
            
**Company:** {lead_name}
**Contact Email:** {lead_email}
**Source:** Website Contact Form
**Priority:** High
**Next Steps:**
- [ ] Qualify lead requirements
- [ ] Schedule discovery call
- [ ] Prepare proposal
- [ ] Follow up within 24 hours

**CRM Status:** Will be created automatically
**Slack Channel:** #sales will be notified

---
*Auto-generated by MCP workflow system at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
""",
            "labels": ["lead", "sales", "high-priority"]
        })
        
        # Extract GitHub issue info
        issue_content = issue_result["content"][0]["text"]
        print(f"✅ GitHub issue created!")
        print(f"📋 {issue_content}")
        
        # Parse issue URL and number
        lines = issue_content.split('\n')
        issue_url = None
        issue_number = None
        for line in lines:
            if "URL:" in line:
                issue_url = line.replace("URL:", "").strip()
            if "Number:" in line:
                issue_number = line.replace("Number:", "").strip()
        
        results["github_issue"] = {
            "url": issue_url,
            "number": issue_number,
            "title": f"🎯 New Lead: {lead_name}"
        }
        
    except Exception as e:
        print(f"❌ GitHub step failed: {e}")
        return False
    finally:
        await github_client.close()
    
    print()
    
    # ===========================================
    # STEP 2: CREATE CRM CONTACT VIA MERGE
    # ===========================================
    
    print("👤 STEP 2: Creating CRM contact via Merge...")
    print("-" * 50)
    
    merge_client = MCPClient([
        "sudo", "docker", "exec", "-i", "mcp-demo-merge-mcp-1",
        "node", "src/index.js"
    ])
    
    try:
        await merge_client.start()
        
        contact_result = await merge_client.call_tool("create_crm_contact", {
            "first_name": lead_name.split()[0],  # "Acme"
            "last_name": f"{lead_name.split()[1]} {lead_name.split()[2]}",  # "Corp Lead 123456"
            "email_addresses": [
                {
                    "email_address": lead_email,
                    "email_address_type": "WORK"
                }
            ]
        })
        
        contact_content = contact_result["content"][0]["text"]
        print(f"✅ CRM contact created!")
        print(f"👤 {contact_content}")
        
        # Parse contact ID
        contact_id = None
        lines = contact_content.split('\n')
        for line in lines:
            if "ID:" in line:
                contact_id = line.replace("ID:", "").strip()
                break
        
        results["crm_contact"] = {
            "id": contact_id,
            "name": lead_name,
            "email": lead_email
        }
        
    except Exception as e:
        print(f"❌ CRM step failed: {e}")
        return False
    finally:
        await merge_client.close()
    
    print()
    
    # ===========================================
    # STEP 3: SEND SLACK NOTIFICATION
    # ===========================================
    
    print("💬 STEP 3: Sending Slack notification...")
    print("-" * 50)
    
    slack_client = MCPClient([
        "sudo", "docker", "exec", "-i", "mcp-demo-slack-mcp-1",
        "node", "src/index.js"
    ])
    
    try:
        await slack_client.start()
        
        # Create rich Slack message with links
        slack_message = f"""🎯 **NEW LEAD ALERT** 🎯
        
**Company:** {lead_name}
**Contact:** {lead_email}
**Priority:** 🔥 HIGH

**Actions Taken:**
✅ GitHub issue created: {results['github_issue']['url'] if results['github_issue'] else 'N/A'}
✅ CRM contact created: {results['crm_contact']['name'] if results['crm_contact'] else 'N/A'}

**Next Steps:**
🔔 Qualify lead within 24 hours
📞 Schedule discovery call
💼 Prepare proposal

*Auto-generated by MCP workflow at {datetime.now().strftime('%H:%M:%S')}*"""
        
        slack_result = await slack_client.call_tool("send_message", {
            "channel": "C08V5PY7TEZ",  # Your test channel ID
            "text": slack_message
        })
        
        slack_content = slack_result["content"][0]["text"]
        print(f"✅ Slack notification sent!")
        print(f"💬 {slack_content}")
        
        results["slack_message"] = {
            "sent": True,
            "message": slack_message
        }
        
    except Exception as e:
        print(f"❌ Slack step failed: {e}")
        return False
    finally:
        await slack_client.close()
    
    print()
    
    # ===========================================
    # WORKFLOW SUMMARY
    # ===========================================
    
    print("🎉 WORKFLOW COMPLETE!")
    print("=" * 60)
    print("✅ **MULTI-SERVICE MCP ORCHESTRATION SUCCESSFUL!**")
    print()
    print("📊 **Results Summary:**")
    print(f"🔧 GitHub Issue: #{results['github_issue']['number']} created")
    print(f"👤 CRM Contact: {results['crm_contact']['name']} added to HubSpot")
    print(f"💬 Slack Alert: Sent to sales team")
    print()
    print("🔗 **Integration Points:**")
    print("• GitHub MCP Server ↔ stdio transport")
    print("• Merge MCP Server ↔ HubSpot CRM via unified API")
    print("• Slack MCP Server ↔ Slack API via bot token")
    print()
    print("🚀 **Your MCP Multi-Service System is FULLY OPERATIONAL!**")
    print()
    print("💡 **Real-world applications:**")
    print("• Lead management automation")
    print("• Customer support ticket workflows") 
    print("• Project management coordination")
    print("• Sales pipeline automation")
    print("• DevOps incident response")
    
    return True


async def main():
    """Main test orchestrator"""
    
    # Pre-flight checks
    print("🔍 Pre-flight checks...")
    
    # Check containers
    containers = ["github-mcp", "merge-mcp", "slack-mcp"]
    for container in containers:
        try:
            result = subprocess.run([
                "sudo", "docker", "ps", "--filter", f"name={container}",
                "--format", "{{.Names}}"
            ], capture_output=True, text=True, timeout=10)

            if container not in result.stdout:
                print(f"❌ {container} container not running")
                print(f"   Run: sudo docker-compose up -d {container}")
                return 1
            else:
                print(f"✅ {container} container running")

        except Exception as e:
            print(f"❌ Error checking {container}: {e}")
            return 1
    
    print()
    
    # Run the complete workflow test
    success = await test_complete_workflow()
    
    if success:
        print("\n🏆 CONGRATULATIONS!")
        print("You've successfully built a multi-service MCP orchestration system!")
        print("This demonstrates real enterprise-grade integration capabilities.")
        return 0
    else:
        print("\n🔧 Some steps failed, but that's normal for a complex system!")
        print("Check the error messages above and individual service logs.")
        return 1


if __name__ == "__main__":
    sys.exit(asyncio.run(main()))